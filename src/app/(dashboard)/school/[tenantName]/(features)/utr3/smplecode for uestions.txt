

// file :- frontend/src/app/(dashboard)/school/[tenantName]/(features)/utr3/page.tsx
import ClientWrapper from './ClientWrapper';

export default function Page() {
  return (
    <div>
      <h1>UTR3 File Upload</h1>
      <ClientWrapper />
    </div>
  );
}

********************

// code of file :--utr3/file-process.client.tsx
'use client';

import { useState, useEffect } from 'react';
import FileSelector from './components/file-selector '
// './components/file-selector';
import ReportViewer from './components/report-viewer';
import ExportButtons from './components/export-buttons';
import { FileHandlers} from './components/utils/fileHandlers';
import type { ParsedFileData, ReportData } from './components/utils/types';

export default function FileUploadFlow() {
  const [fileA, setFileA] = useState<ParsedFileData | null>(null);
  const [fileB, setFileB] = useState<ParsedFileData | null>(null);
  const [report, setReport] = useState<ReportData | null>(null);

 
// ðŸ“¦ Purpose of This useEffect

// This effect watches for changes to fileA and fileB, and when both are present, it generates a report (likely combining data from both files) and updates the state with that generated report.
  useEffect(() => {

    console.log("ðŸ§  useEffect triggered with fileA and fileB", fileA, fileB);

    if (fileA && fileB) {
      console.log("ðŸ§  if condition triggered " );
      // mock report generation
      
      
      const generated: ReportData = {
        summary: `  fileHandlers  ts   summary Report from ${fileA.fileName} and ${fileB.fileName}`,

        rows: [...fileA.data.slice(0, 5), ...fileB.data.slice(0, 5)],   // actual processed data 
      
      
      };
      console.log("row       ?" ,typeof(generated.rows) , generated.rows)
      console.log("summary     ?" ,generated.summary)
      
      setReport(generated);
    }

    console.log("ðŸ§  if condition not not not not triggered " );
     
  }, [fileA, fileB]);




  return (
    <div>
<div>
  <FileSelector
  label="Upload File A"
  onFileSelect={async (file: File) => {
    const result = await FileHandlers(file);
     console.log("File A result:", result); // âœ… DEBUG LINE
    setFileA(result);
  }}
/>

</div>

     
<div>
      <FileSelector label="Upload File B" 
      onFileSelect={async (file: File ) => {

        const result = await FileHandlers(file);
         console.log("File B result:", result); // âœ… DEBUG LINE
        setFileB(result);
      }} />
</div>
      {report && (
        <>
          <ReportViewer report={report} />
          <ExportButtons report={report} />
        </>
      )}
    </div>
  );
}

********************
// ClientWrapper.tsx
'use client';

import dynamic from 'next/dynamic';

const Xyxy= dynamic(() => import('./file-process.client'), {
  ssr: false,
});

export default function ClientWrapper() {
  return <Xyxy />;
}

****************

// file  :- frontend/src/app/(dashboard)/school/[tenantName]/(features)/utr3/components/file-selector .tsx
'use client';
import React from 'react';

type FileSelectorProps = {
  label?: string;
  onFileSelect: (file: File) => Promise<void>;
};

export default function FileSelector({ label, onFileSelect }: FileSelectorProps) {
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      onFileSelect(file);
    }
  };

  return (
    <label>
      {label}
      <input type="file" onChange={handleFileChange} />
    </label>
  );
}
******************
