# üìò JSX + TypeScript Cheat Sheet for Next.js 15(Comprehensive)

---

## üìò What is JSX ?
    JSX stands for ** JavaScript XML ** ‚Äî a syntax extension that lets you write HTML - like code in your JavaScript / TypeScript files, mainly used with React.  
It is compiled to `React.createElement(...)` calls(or the newer JSX transform), letting you describe UI declaratively.

```tsx
// JSX looks like HTML but compiles to React.createElement()
const element = <h1>Hello, world!</h1>;
```

---

## üß± JSX Basics

‚úÖ Valid JSX Tags:

```tsx
<div>Hello</div>         // ‚úÖ HTML tag
<MyComponent />          // ‚úÖ React component
```

‚ö†Ô∏è ** Component names must be capitalized! **
    JSX uses capitalization to differentiate custom components from HTML tags.

---

## üß† JSX Rules Overview

    | Rule | Description | Example |
| -------------------------------------- | ----------------------------------- | ----------------------------------- |
| 1. Component names must start uppercase | Lowercase = HTML | ‚úÖ `<MyComponent />` ‚ùå `<mycomponent />` |
| 2. JSX must have one parent element | Wrap with `<div>` or`<>...</>` | ‚úÖ `<div>...</div>` ‚úÖ `<>...</>` |
| 3. Props are passed like attributes | Pass values in attributes | `<Button color="blue" size="sm" />` |
| 4. Self - closing tags must end with `/` | Required for void elements | `<input />`, `<img />` |
| 5. Expressions go in `{}` | Insert JS inside JSX | `{user.name}`, `{count + 1}` |
| 6. `className` instead of`class` | `class` is reserved in JS | `<div className="box" />` |
| 7. `htmlFor` instead of`for` | For labels | `<label htmlFor="email">` |

    ---

## 1. Setup & File Types

    - Files containing JSX / React components use`.tsx`.  
- Pure logic / utilities use`.ts`.  
- Ensure`@types/react` and `@types/react-dom` are installed(usually included by`create-next-app --ts`).  
- Bootstrap with TypeScript:
```bash
  npx create-next-app@latest --ts
  ```
    - Use a modern editor(VSCode) with TypeScript and ESLint integrations.

---

## 2. `tsconfig.json` & JSX settings

Typical relevant config in `tsconfig.json`:

```json
{
  "compilerOptions": {
    "target": "esnext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "jsx": "react-jsx",
    "module": "esnext",
    "moduleResolution": "node",
    "allowJs": false,
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
```

    - Use`"jsx": "react-jsx"` for the new JSX transform(React 17 +).  
- `strict: true` enables safer TypeScript checks.  
- `resolveJsonModule` allows importing `.json` files.

---

## 3. Basic Component Typing

### Function component with props

    ```ts
type MyComponentProps = {
  title: string;
  count?: number;   // optional
};

function MyComponent({ title, count = 0 }: MyComponentProps) {
  return <div>{title} ‚Äî {count}</div>;
}
export default MyComponent;
```

### Arrow + React.FC

    ```ts
const Another: React.FC<MyComponentProps> = ({ title, count = 0 }) => {
  return <span>{title} ({count})</span>;
};
```

    > Note: Some teams avoid `React.FC` because it implicitly includes `children` and can complicate generics or defaultProps.

---

## 4. Props & Children

    - Use`React.ReactNode` to type`children`(anything renderable).  
- Use`React.ReactElement` to require a React element.  
- For component props that accept another component: `React.ComponentType<P>` or`(props: P) => JSX.Element`.

```ts
type CardProps = {
  children: React.ReactNode;
  header?: string;
};

const Card = ({ children, header }: CardProps) => (
  <div className="card">
    {header && <h2>{header}</h2>}
    <div>{children}</div>
  </div>
);
```

---

## 5. State & Hooks(Typing)

### useState

    ```ts
const [count, setCount] = useState<number>(0);
const [user, setUser] = useState<User | null>(null);
```

Type inference works if initial value is provided; otherwise annotate(e.g., `useState<string | null>(null)`).

### useRef

    ```ts
const divRef = useRef<HTMLDivElement | null>(null);
const valueRef = useRef<number>(0); // for mutable non-DOM value
```

### useCallback / useMemo

    ```ts
const memoValue = useMemo<number>(() => compute(x), [x]);
const handle = useCallback((id: string) => fetchById(id), []);
```

---

## 6. Events & Refs

### Event handlers

    ```ts
const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
  e.preventDefault();
};

const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const value = e.target.value;
};
```

### Forwarding refs

    ```ts
type InputProps = { value: string; onChange: (v: string) => void };

const Input = React.forwardRef<HTMLInputElement, InputProps>(({ value, onChange }, ref) => (
  <input ref={ref} value={value} onChange={e => onChange(e.target.value)} />
));
```

---

## 7. Conditional Rendering & Fragments

    - Fragments: `<>...</>` or`<React.Fragment>...</React.Fragment>`
        - Conditional rendering:

```tsx
{condition && <Component />}
{condition ? <A /> : <B />}
```

---

## 8. Typing Next.js - specific features

### getStaticProps / getServerSideProps / getStaticPaths

    ```ts
import { GetStaticProps, GetServerSideProps, GetStaticPaths } from "next";

export const getStaticProps: GetStaticProps<{ posts: Post[] }> = async () => {
  const posts = await fetchPosts();
  return { props: { posts } };
};

export const getStaticPaths: GetStaticPaths = async () => {
  const paths = await fetchPaths();
  return { paths, fallback: false };
};

export const getServerSideProps: GetServerSideProps<{ data: Data }> = async (ctx) => {
  const data = await fetch(ctx.params?.id as string);
  return { props: { data } };
};
```

    - The generic type in `GetStaticProps<YourProps>` is the shape of `props` returned to the page.

### API Routes

    ```ts
import type { NextApiRequest, NextApiResponse } from "next";

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<{ name?: string; error?: string }>
) {
  if (req.method === "GET") {
    res.status(200).json({ name: "John" });
  } else {
    res.status(405).json({ error: "Method not allowed" });
  }
}
```

### next / link and useRouter

    ```tsx
import Link from "next/link";
<Link href="/about">About</Link>;

import { useRouter } from "next/router";
const { query } = useRouter(); // query.id is string | string[] | undefined
if (typeof query.id !== "string") return;
```

---

## 9. Utility Types & Advanced Patterns

    - Useful TS utility types: `Partial<T>`, `Required<T>`, `Pick<T, K>`, `Omit<T, K>`, `Record<K, T>`
        - `ComponentProps<typeof Component>` to extract props from a component.  
- Generics in components:

```ts
function List<T>({ items, render }: { items: T[]; render: (item: T) => React.ReactNode }) {
  return <ul>{items.map((i, idx) => <li key={idx}>{render(i)}</li>)}</ul>;
}
```

    - Discriminated unions for complex prop shapes(good for variant - driven components).

---

## 10. Common Pitfalls & Tips

    - Don't forget to check for `undefined` in `router.query` or optional props.  
        - Avoid excessive use of `as` type assertions.  
- Don't mix `defaultProps` with `React.FC` in TypeScript (can be tricky).  
    - Enable`strict` mode and prefer explicit types when inference fails.  
- Keep ESLint + TypeScript parser consistent(e.g., `@typescript-eslint/parser`).  
- Use`ts-jest` or proper TS setup for tests if using Jest.

---

## üåÄ Dynamic Components in Next.js(Details & Gotchas)

Next.js supports dynamic imports, often used for client - only components or heavy components:

```tsx
import dynamic from "next/dynamic";

// ‚úÖ Correct: PascalCase and ssr disabled for client-only
const FileUploadFlow = dynamic(() => import("../components/FileUploadFlow"), { ssr: false });
return <FileUploadFlow />;
```

    ** Gotchas:**

        - If you name the variable lowercase, JSX treats it as an intrinsic element, e.g. `<fileuploadflow />` will be treated as HTML and TypeScript will error that`'fileuploadflow' does not exist on type 'JSX.IntrinsicElements'`.Always use PascalCase variable names for components.
- You can provide a loading component: `dynamic(() => import(...), { loading: () => <Spinner /> })`.

---

## üõ°Ô∏è JSX + TypeScript Gotchas(expanded)

    | Error | Cause | Fix |
| ----- | ----- | --- |
| `Property 'X' does not exist on type 'JSX.IntrinsicElements'` | Using lowercase tag for a component | Rename variable to `PascalCase` and use`<X />` |
| Importing React component but not using it | Linter error`is declared but its value is never read` | Use the component or remove the import |
| Function component type mismatch | Wrong props type passed | Ensure props types align or use `ComponentProps` to extract types |
| Event handler type errors | Using wrong SyntheticEvent type | Use`React.MouseEvent<HTMLButtonElement>` etc. |

    ---

## üîÑ Loops & Keys in JSX

    ```tsx
<ul>
  {items.map(item => (
    <li key={item.id}>{item.name}</li>
  ))}
</ul>
```

‚úÖ Keys must be stable and unique per list.Avoid using index as key when items can reorder.

---

## üîÅ Conditional Rendering Patterns

    ```tsx
// Ternary
{isLoggedIn ? <LogoutButton /> : <LoginButton />}

// Short-circuit
{message && <p>{message}</p>}

// IIFE for more complex logic
{(() => {
  if (state === "loading") return <Spinner />;
  if (items.length === 0) return <Empty />;
  return <List items={items} />;
})()}
```

---

## üí° JSX Attributes Quick Reference

    | HTML Attribute | JSX Equivalent |
| -------------- | -------------- |
| `class` | `className` |
| `for` | `htmlFor` |
| `style="color: red"` | `style={{ color: 'red' }}` |
| `onclick="..."` | `onClick={() => ...}` |

    ---

## üß† Naming Conventions Recap

    | Item | Format | Example |
| ----------------------- | ------------ | ------------------------------------ |
| Component Name | `PascalCase` | `MyComponent` |
| Dynamic Import Variable | `PascalCase` | `const LazyComponent = dynamic(...)` |
| JSX Tag for Component | `PascalCase` | `<LazyComponent />` |
| JSX Tag for HTML | `lowercase` | `<div>`, `<input>` |

        ---

## üìå Practical Tips & Best Practices

    - Use PascalCase for component names and variables used as JSX tags.  
- Keep components small and focused(Single Responsibility).  
- Prefer`memo` for pure components that receive props causing re - renders.  
- Use`useCallback` / `useMemo` carefully ‚Äî only for expensive calculations or stable identity needs.  
- Use`zod` / `io-ts` / `yup` for runtime validation of external data(e.g., API responses) and map to TypeScript types.  
- Use`eslint-plugin-react` and `@typescript-eslint` rules for consistent code quality.  
- For CSS: prefer CSS Modules, Tailwind, or styled system depending on project needs.Use the project's chosen strategy consistently.

---

## üß© Example Full Component with Next.js`getStaticProps`

    ```tsx
import { GetStaticProps } from "next";

type Post = { id: string; title: string };
type Props = { posts: Post[] };

export default function PostsPage({ posts }: Props) {
  return (
    <div>
      <h1>Posts</h1>
      <ul>
        {posts.map((p) => (
          <li key={p.id}>{p.title}</li>
        ))}
      </ul>
    </div>
  );
}

export const getStaticProps: GetStaticProps<Props> = async () => {
  const posts: Post[] = await fetchPosts();
  return { props: { posts } };
};
```

---

## üß© Smaller Examples & Snippets

### Typed custom hook

    ```ts
function useCounter(initial = 0) {
  const [count, setCount] = useState<number>(initial);
  const inc = () => setCount(c => c + 1);
  return { count, inc };
}
```

### Extract component prop types

    ```ts
type ButtonProps = React.ComponentProps<typeof Button>;
```

---

## ‚úÖ Summary

    - JSX looks like HTML but runs inside JS / TS; always use `.tsx` for components.  
- Capitalize component names and follow naming conventions.  
- Use TypeScript to strongly type props, hooks, events, and Next.js data functions.  
- For dynamic imports in Next.js, use`dynamic()` + PascalCase and `{ ssr: false }` for client - only.  
- Follow common best practices(keys, stable props, `strict` TS) and keep components small.

---

## üìö Further Reading & Resources

    - React + TypeScript Cheatsheet: https://github.com/typescript-cheatsheets/react  
    - Next.js Docs(TypeScript): https://nextjs.org/docs/basic-features/typescript  
- TypeScript Handbook: https://www.typescriptlang.org/docs/handbook/intro.html

---

* Generated for you ‚Äî includes the content from my first, more detailed answer plus the compact JSX rules and tips you requested.*  


‚úÖ 4. Guidelines to Organize More Pages

| Page                | Folder (under `app/`)   | Description             |
| ------------------- | ----------------------- | ----------------------- |
| `/timetable`        | `app/timetable/`        | Route with Timetable UI |
| `/user-upload`      | `app/user-upload/`      | File upload             |
| `/download-reports` | `app/download-reports/` | Reports                 |
| `/admin`            | `app/admin/`            | Admin dashboard         |
| `/admin/users`      | `app/admin/users/`      | Admin sub-routes        |
